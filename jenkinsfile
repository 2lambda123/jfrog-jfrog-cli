node {

    def architectures = [
        [pkg: 'jfrog-cli-linux-386', goos: 'linux', goarch: '386'],
        [pkg: 'jfrog-cli-linux-arm64', goos: 'linux', goarch: 'arm64'],
        [pkg: 'jfrog-cli-mac-386', goos: 'darwin', goarch: 'amd64'],
        [pkg: 'jfrog-cli-windows-amd64', goos: 'windows', goarch: 'amd64', fileExtention: '.exe']
    ]

    def subject = 'jfrog'
    def repo = 'jfrog-cli'
    def workspace = pwd()
    withEnv(["PATH+GOROOT=${tool 'go-1.6.2'}/bin","GOPATH=${workspace}"]) {
        stage 'Go get'
        sh 'go get github.com/jfrogdev/jfrog-cli-go/...'
        sh 'bin/jfrog --version > version'
        def version = readFile('version').trim().split(" ")[2]
        def buildAndUploadClouser = buildAndUpload(subject, repo, version, workspace)
        def builds = [:]
        for (int i = 0; i < architectures.size(); i++) {
            def currentBuild = architectures[i]
                stage "Build ${currentBuild.pkg}"
                buildAndUploadClouser(currentBuild.goos, currentBuild.goarch, currentBuild.pkg, currentBuild.fileExtention)
            }
    }
}

def uploadToBintray(subject, repo, version, workspace) {
    return { pkg, fileExtension ->
         sh """#!/bin/bash
               bin/jfrog bt u $workspace/jfrog$fileExtension $subject/$repo/$pkg/$version --user=$USER_NAME --key=$KEY
            """
    }
}

def buildAndUpload(subject, repo, version, workspace) {
    def uploadToBintrayClouser = uploadToBintray(subject, repo, version, workspace)
    return { goos, goarch, pkg, fileExtension ->
        sh "env GOOS=$goos GOARCH=$goarch go build github.com/jfrogdev/jfrog-cli-go/jfrog"
        def extension = fileExtension == null ? '' : fileExtension
        uploadToBintrayClouser(pkg, extension)
        sh "rm jfrog$extension"
    }
}