# Set tests credentials integration and GitHub input source
commonConfiguration: &COMMON_CONFIGURATION
  integrations:
    - name: tests_credentials
  inputResources:
    - name: jfrogCliGit

# Create JFrog platform access token and save it in './jfToken'
createRtAccessToken: &CREATE_ACCESS_TOKEN curl -H "Authorizationֿֿ: Bearer $int_tests_credentials_access_token" $int_tests_credentials_jfrog_url/access/api/v1/tokens -d 'expiry=1800' -d 'audience=*@*' | jq '.access_token' -r > jfToken

# Update commit status in GitHub
updateCommitStatus: &UPDATE_COMMIT_STATUS
  onStart:
    - update_commit_status jfrogCliGit --context "$step_name"
  onComplete:
    - update_commit_status jfrogCliGit --context "$step_name"

resources:
  - name: jfrogCliGit
    type: GitRepo
    configuration:
      path: jfrog/jfrog-cli
      gitProvider: github
      buildOn:
        pullRequestCreate: true

pipelines:
  # Global configuration
  - name: test_cli
    configuration:
      runtime:
        type: image
        image:
          custom:
            name: releases-docker.jfrog.io/jfrog-ecosystem-integration-env
            tag: 1.3.0
      environmentVariables:
        readOnly:
          GOPROXY: direct
          CI: "true"

    steps:
      - name: Artifactory
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.artifactory -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Npm
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - npm --version
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.npm -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Maven
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - mvn --version
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.maven -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Gradle
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - gradle --version
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.gradle -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Pip
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - pip --version
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.pip -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Go
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - go version
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.go -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Distribution
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.distribution -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken) 

      - name: Docker
        type: Bash
        configuration:
          runtime:
            type: host
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - docker version
            # Install Golang
            - curl -LO https://get.golang.org/$(uname)/go_installer && chmod +x go_installer && SHELL=bash ./go_installer && rm go_installer
            - export PATH=/$HOME/.go/bin:$PATH
            - go version && go mod tidy
            # Install Podman
            - echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /" | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
            - curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/Release.key | apt-key add -
            - timeout 1h bash -c 'until apt update && apt -yq install podman; do sleep 10; done'
            - podman version

            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH HOME=$HOME `which go` test -v -timeout 0 -test.docker -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken) -rt.dockerRepoDomain=ecosysjfrog-docker-virtual.jfrog.io -rt.dockerVirtualRepo=docker-virtual -rt.DockerLocalRepo=docker-local -rt.dockerRemoteRepo=docker-remote

      - name: NuGet
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - nuget help 2>&1 | head -1
            - apt install -yq dotnet-sdk-2.1
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.nuget -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Plugins
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.plugins -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)

      - name: Xray
        type: Bash
        configuration:
          <<: *COMMON_CONFIGURATION
        execution:
          <<: *UPDATE_COMMIT_STATUS
          onExecute:
            - cd $res_jfrogCliGit_resourcePath
            - *CREATE_ACCESS_TOKEN
            - env -i PATH=$PATH M2_HOME=$M2_HOME HOME=$HOME `which go` test -v -timeout 0 -test.xray -jfrog.url=$int_tests_credentials_jfrog_url -jfrog.accessToken=$(< jfToken)
